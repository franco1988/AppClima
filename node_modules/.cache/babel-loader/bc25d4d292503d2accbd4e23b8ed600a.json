{"ast":null,"code":"var _jsxFileName = \"/home/franco/Documentos/HENRY/AppClima/src/containers/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport About from '../components/About.jsx';\nimport Ciudad from '../components/Ciudad.jsx'; //const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  apiKey\n} = dotenv;\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    if (cities.includes(ciudad)) {\n      alert(\"La Ciudad ya existe\");\n    } else {\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`).then(r => r.json()).then(recurso => {\n        if (recurso.main !== undefined) {\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min - 273),\n            max: Math.round(recurso.main.temp_max - 273),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n    }\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/about\",\n      component: About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 43\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/ciudad/:ciudadId\",\n      render: ({\n        match\n      }) => /*#__PURE__*/_jsxDEV(Ciudad, {\n        city: onFilter(match.params.ciudadId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/franco/Documentos/HENRY/AppClima/src/containers/App.js"],"names":["React","useState","Route","Nav","Cards","About","Ciudad","apiKey","dotenv","App","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","includes","alert","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","onFilter","ciudadId","parseInt","length","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Route} from 'react-router-dom';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport About from '../components/About.jsx';\nimport Ciudad from '../components/Ciudad.jsx';\n\n//const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\nconst {apiKey} = dotenv;\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    if(cities.includes(ciudad)){\n      alert(\"La Ciudad ya existe\");\n    } else {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min - 273),\n            max: Math.round(recurso.main.temp_max -273),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n    }\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n    if(ciudad.length > 0) {\n        return ciudad[0];\n    } else {\n        return null;\n    }\n  }\n  return (\n    <div className=\"App\">\n      <Route path='/' render={() => <Nav onSearch={onSearch}/>} />\n      <Route path='/about' component={About} />\n      <Route exact path='/' render={() => <Cards cities={cities} onClose={onClose} />} />\n      <Route exact path='/ciudad/:ciudadId'\n        render={({match}) => <Ciudad city={onFilter(match.params.ciudadId)}/>}\n      />\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}